{"version":3,"sources":["../../../src/@ionic-native/plugins/media/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CordovaInstance, Plugin, CordovaCheck, IonicNativePlugin } from '@ionic-native/core';\r\n\r\ndeclare var Media: any;\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class MediaObject {\r\n\r\n  /**\r\n   * Open a media file\r\n   * @param src {string} A URI containing the audio content.\r\n   * @param onStatusUpdate {Function} A callback function to be invoked when the status of the file changes\r\n   */\r\n  constructor(private _objectInstance: any) {}\r\n\r\n  /**\r\n   * Get the current amplitude of the current recording.\r\n   * @returns {Promise<any>} Returns a promise with the amplitude of the current recording\r\n   */\r\n  @CordovaInstance()\r\n  getCurrentAmplitude(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get the current position within an audio file. Also updates the Media object's position parameter.\r\n   * @returns {Promise<any>} Returns a promise with the position of the current recording\r\n   */\r\n  @CordovaInstance()\r\n  getCurrentPosition(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get the duration of an audio file in seconds. If the duration is unknown, it returns a value of -1.\r\n   * @returns {number} Returns a promise with the duration of the current recording\r\n   */\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  getDuration(): number { return; }\r\n\r\n  /**\r\n   * Starts or resumes playing an audio file.\r\n   */\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  play(iosOptions?: {\r\n    numberOfLoops?: number,\r\n    playAudioWhenScreenIsLocked?: boolean\r\n  }): void { }\r\n\r\n  /**\r\n   * Pauses playing an audio file.\r\n   */\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  pause(): void { }\r\n\r\n  /**\r\n   * Releases the underlying operating system's audio resources. This is particularly important for Android, since there are a finite amount of OpenCore instances for media playback. Applications should call the release function for any Media resource that is no longer needed.\r\n   */\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  release(): void { }\r\n\r\n  /**\r\n   * Sets the current position within an audio file.\r\n   * @param {number} milliseconds The time position you want to set for the current audio file\r\n   */\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  seekTo(milliseconds: number): void { }\r\n\r\n  /**\r\n   * Set the volume for an audio file.\r\n   * @param volume {number} The volume to set for playback. The value must be within the range of 0.0 to 1.0.\r\n   */\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  setVolume(volume: number): void { }\r\n\r\n  /**\r\n   * Starts recording an audio file.\r\n   */\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  startRecord(): void { }\r\n\r\n  /**\r\n   * Stops recording\r\n   */\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  stopRecord(): void { }\r\n\r\n  /**\r\n   * Pauses recording\r\n   */\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  pauseRecord(): void { }\r\n\r\n  /**\r\n   * Resumes recording\r\n   */\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  resumeRecord(): void { }\r\n\r\n  /**\r\n   * Stops playing an audio file.\r\n   */\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  stop(): void { }\r\n\r\n}\r\n\r\nexport type MediaStatusUpdateCallback = (statusCode: number) => void;\r\n\r\nexport interface MediaError {\r\n\r\n  /**\r\n   * Error message\r\n   */\r\n  message: string;\r\n\r\n  /**\r\n   * Error code\r\n   */\r\n  code: number;\r\n\r\n}\r\n\r\nexport type MediaErrorCallback = (error: MediaError) => void;\r\n\r\n/**\r\n * @name Media\r\n * @description\r\n * Some hints if you are using iOS and recording doesn't work:\r\n * 1.) Try to use a absolute file path but remove beginning \"file://\".\r\n * Then it looks like: `/var/mobile/Containers/Data/Application/AF438B8B-7724-4FBB-8E69-083463224FC4/tmp/my_file.m4a`\r\n * Example: `this.media.create(this.file.tempDirectory.replace(/^file:\\/\\//, '') + 'my_file.m4a')`\r\n * 2.) If that's not working, too, create the file before using.\r\n * Example:\r\n * ```typescript\r\n * import { MediaPlugin, MediaObject } from '@ionic-native/media';\r\n * import { File } from '@ionic-native/file';\r\n *\r\n * ...\r\n *\r\n * constructor(private media: MediaPlugin, private file: File) { }\r\n *\r\n * ...\r\n *\r\n * this.file.createFile(this.file.tempDirectory, 'my_file.m4a', true).then(() => {\r\n *   let file = this.media.create(this.file.tempDirectory.replace(/^file:\\/\\//, '') + 'my_file.m4a');\r\n *   file.startRecord();\r\n *   window.setTimeout(() => file.stopRecord(), 10000);\r\n * });\r\n * ```\r\n * \r\n * You can find the reasons here: https://github.com/driftyco/ionic-native/issues/1452#issuecomment-299605906\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { MediaPlugin, MediaObject } from '@ionic-native/media';\r\n *\r\n *\r\n * constructor(private media: MediaPlugin) { }\r\n *\r\n *\r\n * ...\r\n *\r\n *\r\n * // Create a MediaPlugin instance.  Expects path to file or url as argument\r\n * // We can optionally pass a second argument to track the status of the media\r\n *\r\n * const onStatusUpdate = (status) => console.log(status);\r\n * const onSuccess = () => console.log('Action is successful.');\r\n * const onError = (error) => console.error(error.message);\r\n *\r\n * const file: MediaObject = this.media.create('path/to/file.mp3', onStatusUpdate, onSuccess, onError);\r\n *\r\n * // play the file\r\n * file.play();\r\n *\r\n * // pause the file\r\n * file.pause();\r\n *\r\n * // get current playback position\r\n * file.getCurrentPosition().then((position) => {\r\n *   console.log(position);\r\n * });\r\n *\r\n * // get file duration\r\n * let duration = file.getDuration();\r\n * console.log(duration);\r\n *\r\n * // skip to 10 seconds (expects int value in ms)\r\n * file.seekTo(10000);\r\n *\r\n * // stop playing the file\r\n * file.stop();\r\n *\r\n * // release the native audio resource\r\n * // Platform Quirks:\r\n * // iOS simply create a new instance and the old one will be overwritten\r\n * // Android you must call release() to destroy instances of media when you are done\r\n * file.release();\r\n *\r\n *\r\n *\r\n * // Recording to a file\r\n * const file: MediaObject = this.media.create('path/to/file.mp3');\r\n *\r\n * file.startRecord();\r\n *\r\n * file.stopRecord();\r\n *\r\n *\r\n * ```\r\n * @classes\r\n * MediaObject\r\n * @interfaces\r\n * MediaError\r\n */\r\n@Plugin({\r\n  pluginName: 'MediaPlugin',\r\n  repo: 'https://github.com/apache/cordova-plugin-media',\r\n  plugin: 'cordova-plugin-media',\r\n  pluginRef: 'Media'\r\n})\r\n\r\nexport class MediaPlugin extends IonicNativePlugin {\r\n\r\n  // Constants\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_NONE: number = 0;\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_STARTING: number = 1;\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_RUNNING: number = 2;\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_PAUSED: number = 3;\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_STOPPED: number = 4;\r\n\r\n  // error codes\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_ERR_ABORTED: number = 1;\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_ERR_NETWORK: number = 2;\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_ERR_DECODE: number = 3;\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_ERR_NONE_SUPPORTED: number = 4;\r\n\r\n  /**\r\n   * Open a media file\r\n   * @param src {string} A URI containing the audio content.\r\n   * @param [onStatusUpdate] {MediaStatusUpdateCallback} A callback function to be invoked when the status of the file changes\r\n   * @param [onSuccess] {Function} A callback function to be invoked after the current play, record, or stop action is completed\r\n   * @param [onError] {MediaErrorCallback} A callback function is be invoked if an error occurs.\r\n   * @return {MediaObject}\r\n   */\r\n  @CordovaCheck()\r\n  create(src: string,\r\n    onStatusUpdate?: MediaStatusUpdateCallback,\r\n    onSuccess?: Function,\r\n    onError?: MediaErrorCallback): MediaObject {\r\n\r\n      // Creates a new media object\r\n      const instance = new Media(src, onSuccess, onError, onStatusUpdate);\r\n      return new MediaObject(instance);\r\n\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}